{"version":3,"file":"static/chunks/704.00b14e1a44f50dee.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Heading,\n  Icon,\n  Menu,\n  MenuItem,\n  MetadataTableWIP,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Popover,\n  Spinner,\n  StyledRawCodeMirror,\n  Subheading,\n  Table,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  ConcurrencyKeyDetailsQuery,\n  ConcurrencyKeyDetailsQueryVariables,\n  ConcurrencyLimitFragment,\n  ConcurrencyStepFragment,\n  DeleteConcurrencyLimitMutation,\n  DeleteConcurrencyLimitMutationVariables,\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  RunQueueConfigFragment,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  QueryRefreshState,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {failedStatuses} from '../runs/RunStatuses';\nimport {titleForRun} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\n\nconst DEFAULT_MIN_VALUE = 1;\nconst DEFAULT_MAX_VALUE = 1000;\n\nexport const InstanceConcurrencyPageContent = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n  const [selectedKey, setSelectedKey] = useQueryPersistedState<string | undefined>({\n    queryKey: 'key',\n  });\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  return (\n    <div style={{overflowY: 'auto'}}>\n      {data ? (\n        <>\n          <Box margin={{bottom: 64}}>\n            <RunConcurrencyContent\n              refreshState={refreshState}\n              hasRunQueue={!!data?.instance.runQueuingSupported}\n              runQueueConfig={data?.instance.runQueueConfig}\n            />\n          </Box>\n          <ConcurrencyLimits\n            instanceConfig={data.instance.info}\n            limits={data.instance.concurrencyLimits}\n            hasSupport={data.instance.supportsConcurrencyLimits}\n            refetch={queryResult.refetch}\n            minValue={data.instance.minConcurrencyLimitValue}\n            maxValue={data.instance.maxConcurrencyLimitValue}\n            selectedKey={selectedKey}\n            onSelectKey={setSelectedKey}\n          />\n        </>\n      ) : (\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      )}\n    </div>\n  );\n});\n\nexport const InstanceConcurrencyPage = () => {\n  const {pageTitle} = React.useContext(InstancePageContext);\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" />}\n      />\n      <InstanceConcurrencyPageContent />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const RunConcurrencyContent = ({\n  hasRunQueue,\n  runQueueConfig,\n  onEdit,\n  refreshState,\n}: {\n  hasRunQueue: boolean;\n  runQueueConfig: RunQueueConfigFragment | null | undefined;\n  refreshState?: QueryRefreshState;\n  onEdit?: () => void;\n}) => {\n  if (!hasRunQueue) {\n    return (\n      <>\n        <Box\n          padding={{vertical: 16, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n        >\n          <Subheading>Run concurrency</Subheading>\n          {refreshState ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n        </Box>\n        <div>\n          Run concurrency is not supported with this run coordinator. To enable run concurrency\n          limits, configure your instance to use the <Mono>QueuedRunCoordinator</Mono> in your{' '}\n          <Mono>dagster.yaml</Mono>. See the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n          >\n            QueuedRunCoordinator documentation\n          </a>{' '}\n          for more information.\n        </div>\n      </>\n    );\n  }\n\n  const infoContent = (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      Run concurrency can be set in your run queue settings. See the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href=\"https://docs.dagster.io/guides/limiting-concurrency-in-data-pipelines#configuring-run-level-concurrency\"\n      >\n        run concurrency documentation\n      </a>{' '}\n      for more information.\n    </Box>\n  );\n\n  const settings_content = runQueueConfig ? (\n    <MetadataTableWIP>\n      <tbody>\n        <tr>\n          <td>Max concurrent runs:</td>\n          <td>{runQueueConfig.maxConcurrentRuns}</td>\n        </tr>\n        <tr>\n          <td>Tag concurrency limits:</td>\n          <td>\n            {runQueueConfig.tagConcurrencyLimitsYaml ? (\n              <StyledRawCodeMirror\n                value={runQueueConfig.tagConcurrencyLimitsYaml}\n                options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n              />\n            ) : (\n              '-'\n            )}\n          </td>\n        </tr>\n      </tbody>\n    </MetadataTableWIP>\n  ) : null;\n\n  return (\n    <>\n      <RunConcurrencyLimitHeader onEdit={onEdit} refreshState={refreshState} />\n      {infoContent}\n      {settings_content}\n    </>\n  );\n};\n\nconst RunConcurrencyLimitHeader = ({\n  onEdit,\n  refreshState,\n}: {\n  onEdit?: () => void;\n  refreshState?: QueryRefreshState;\n}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"bottom\"\n  >\n    <Subheading>Run concurrency</Subheading>\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      {refreshState ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n      {onEdit ? (\n        <Button icon={<Icon name=\"edit\" />} onClick={() => onEdit()}>\n          Edit configuration\n        </Button>\n      ) : null}\n    </Box>\n  </Box>\n);\n\nexport const ConcurrencyLimits = ({\n  instanceConfig,\n  hasSupport,\n  limits,\n  refetch,\n  minValue,\n  maxValue,\n  selectedKey,\n  onSelectKey,\n}: {\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n  maxValue?: number;\n  minValue?: number;\n  selectedKey?: string | null;\n  onSelectKey: (key: string | undefined) => void;\n}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const onConcurrencyStepsDialogClose = React.useCallback(() => {\n    onSelectKey(undefined);\n  }, [onSelectKey]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const sortedLimits = React.useMemo(() => {\n    return [...limits].sort((a, b) => COMMON_COLLATOR.compare(a.concurrencyKey, b.concurrencyKey));\n  }, [limits]);\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not support global concurrency limits. You will need to ' +\n              'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n              'feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not currently support global concurrency limits. You may need to ' +\n              'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n              'to support this feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <ConcurrencyLimitHeader onAdd={onAdd} />\n      {limits.length === 0 ? (\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        </Box>\n      ) : (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '260px'}}>Concurrency key</th>\n              <th style={{width: '20%'}}>Total slots</th>\n              <th style={{width: '20%'}}>Assigned steps</th>\n              <th style={{width: '20%'}}>Pending steps</th>\n              <th style={{width: '20%'}}>All steps</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedLimits.map((limit) => (\n              <tr key={limit.concurrencyKey}>\n                <td>{limit.concurrencyKey}</td>\n                <td>{limit.slotCount}</td>\n                <td>{limit.pendingSteps.filter((x) => !!x.assignedTimestamp).length}</td>\n                <td>{limit.pendingSteps.filter((x) => !x.assignedTimestamp).length}</td>\n                <td>\n                  <span style={{marginRight: 16}}>{limit.pendingSteps.length}</span>\n                  <Tag intent=\"primary\" interactive>\n                    <ButtonLink\n                      onClick={() => {\n                        onSelectKey(limit.concurrencyKey);\n                      }}\n                    >\n                      View all\n                    </ButtonLink>\n                  </Tag>\n                </td>\n                <td>\n                  <ConcurrencyLimitActionMenu\n                    concurrencyKey={limit.concurrencyKey}\n                    onEdit={onEdit}\n                    onDelete={onDelete}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n      <ConcurrencyStepsDialog\n        title={\n          <span>\n            Concurrency steps for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onConcurrencyStepsDialogClose}\n        concurrencyKey={selectedKey}\n        onUpdate={refetch}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitHeader = ({onAdd}: {onAdd?: () => void}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"top-and-bottom\"\n  >\n    <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n      <Subheading>Global op/asset concurrency</Subheading>\n      <Tag>Experimental</Tag>\n    </Box>\n    {onAdd ? (\n      <Button icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n        Add concurrency limit\n      </Button>\n    ) : null}\n  </Box>\n);\n\nconst ConcurrencyLimitActionMenu = ({\n  concurrencyKey,\n  onDelete,\n  onEdit,\n}: {\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (\n  concurrencyLimit?: string,\n  minLimitValue: number = DEFAULT_MIN_VALUE,\n  maxLimitValue: number = DEFAULT_MAX_VALUE,\n) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value >= minLimitValue && value <= maxLimitValue;\n};\n\nconst AddConcurrencyLimitDialog = ({\n  open,\n  onClose,\n  onComplete,\n  maxValue,\n  minValue,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  maxValue: number;\n  minValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Concurrency limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={\n            !isValidLimit(limitInput.trim(), minValue, maxValue) || !keyInput || isSubmitting\n          }\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n  minValue,\n  maxValue,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  minValue: number;\n  maxValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Concurrency limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button\n            intent=\"primary\"\n            onClick={save}\n            disabled={!isValidLimit(limitInput.trim(), minValue, maxValue)}\n          >\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [deleteConcurrencyLimit] = useMutation<\n    DeleteConcurrencyLimitMutation,\n    DeleteConcurrencyLimitMutationVariables\n  >(DELETE_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await deleteConcurrencyLimit({variables: {concurrencyKey}});\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyActionMenu = ({\n  pendingStep,\n  onUpdate,\n}: {\n  pendingStep: ConcurrencyStepFragment;\n  onUpdate: () => void;\n}) => {\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem\n            key=\"free-concurrency-slots-step\"\n            icon=\"status\"\n            text=\"Free concurrency slot for step\"\n            onClick={async () => {\n              const resp = await freeSlots({\n                variables: {runId: pendingStep.runId, stepKey: pendingStep.stepKey},\n              });\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slot',\n                });\n              }\n            }}\n          />\n          <MenuItem\n            key=\"free-concurrency-slots-run\"\n            icon=\"status\"\n            text=\"Free all concurrency slots for run\"\n            onClick={async () => {\n              await showSharedToaster({message: 'Freeing concurrency slots...'});\n              const resp = await freeSlots({variables: {runId: pendingStep.runId}});\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slots',\n                });\n              }\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button rightIcon={<Icon name=\"expand_more\" />}>Actions</Button>\n    </Popover>\n  );\n};\n\nconst ConcurrencyStepsDialog = ({\n  concurrencyKey,\n  onClose,\n  title,\n  onUpdate,\n}: {\n  concurrencyKey?: string | null;\n  title: string | React.ReactNode;\n  onClose: () => void;\n  onUpdate: () => void;\n}) => {\n  const queryResult = useQuery<ConcurrencyKeyDetailsQuery, ConcurrencyKeyDetailsQueryVariables>(\n    CONCURRENCY_KEY_DETAILS_QUERY,\n    {\n      variables: {\n        concurrencyKey: concurrencyKey || '',\n      },\n      skip: !concurrencyKey,\n    },\n  );\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const refetch = React.useCallback(() => {\n    queryResult.refetch();\n    onUpdate();\n  }, [queryResult, onUpdate]);\n\n  return (\n    <Dialog\n      isOpen={!!concurrencyKey}\n      title={title}\n      onClose={onClose}\n      style={{\n        minWidth: '400px',\n        maxWidth: '1000px',\n        width: '90vw',\n        maxHeight: '90vh',\n      }}\n    >\n      <Box padding={{vertical: 16}} flex={{grow: 1}} style={{overflowY: 'auto'}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : (\n          <PendingStepsTable keyInfo={data.instance.concurrencyLimit} refresh={refetch} />\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst PendingStepsTable = ({\n  keyInfo,\n  refresh,\n}: {\n  keyInfo: ConcurrencyLimitFragment;\n  refresh: () => void;\n}) => {\n  const runIds = [...new Set(keyInfo.pendingSteps.map((step) => step.runId))];\n  const queryResult = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        filter: {runIds},\n      },\n      skip: !keyInfo.pendingSteps.length,\n    },\n  );\n  const statusByRunId: {[id: string]: RunStatus} = {};\n  const runs =\n    queryResult.data?.pipelineRunsOrError.__typename === 'Runs'\n      ? queryResult.data.pipelineRunsOrError.results\n      : [];\n  runs.forEach((run) => {\n    statusByRunId[run.id] = run.status;\n  });\n\n  const steps = [...keyInfo.pendingSteps];\n  steps.sort((a, b) => {\n    if (a.priority && b.priority && a.priority !== b.priority) {\n      return a.priority - b.priority;\n    }\n    return a.enqueuedTimestamp - b.enqueuedTimestamp;\n  });\n  const assignedSteps = steps.filter((step) => !!step.assignedTimestamp);\n  const pendingSteps = steps.filter((step) => !step.assignedTimestamp);\n\n  const tableHeader = (\n    <thead>\n      <tr>\n        <th>Run ID</th>\n        <th>Step key</th>\n        <th>Assigned</th>\n        <th>Queued</th>\n        <th>\n          <Box flex={{alignItems: 'center', direction: 'row', gap: 4}}>\n            Priority\n            <Tooltip\n              placement=\"top\"\n              content=\"Priority can be set on each op/asset using the 'dagster/priority' tag. Higher priority steps will be assigned slots first.\"\n            >\n              <Icon name=\"info\" color={Colors.accentGray()} />\n            </Tooltip>\n          </Box>\n        </th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n\n  if (!steps.length) {\n    return (\n      <Table>\n        {tableHeader}\n        <tbody>\n          <tr>\n            <td colSpan={6}>\n              <Box\n                flex={{alignItems: 'center', justifyContent: 'center'}}\n                style={{color: Colors.textLight()}}\n                padding={16}\n              >\n                There are no active or pending steps for this concurrency key.\n              </Box>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <Table>\n      {tableHeader}\n      <tbody style={{backgroundColor: Colors.backgroundYellow()}}>\n        {assignedSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n      <tbody>\n        {pendingSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst PendingStepRow = ({\n  step,\n  statusByRunId,\n  onUpdate,\n}: {\n  step: ConcurrencyStepFragment;\n  statusByRunId: {[id: string]: RunStatus};\n  onUpdate: () => void;\n}) => {\n  const runStatus = statusByRunId[step.runId];\n  return (\n    <tr>\n      <td>\n        {runStatus ? (\n          <Link to={`/runs/${step.runId}`}>\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <RunStatusDot status={runStatus} size={10} />\n              <Mono>{titleForRun({id: step.runId})}</Mono>\n              {failedStatuses.has(runStatus) ? (\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Slots for canceled / failed runs can automatically be freed by configuring a run monitoring setting.\"\n                >\n                  <Icon name=\"info\" color={Colors.accentGray()} />\n                </Tooltip>\n              ) : null}\n            </Box>\n          </Link>\n        ) : (\n          <Mono>{titleForRun({id: step.runId})}</Mono>\n        )}\n      </td>\n      <td>\n        <Mono>{step.stepKey}</Mono>\n      </td>\n      <td>\n        {step.assignedTimestamp ? (\n          <TimeElapsed startUnix={step.assignedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>\n        {step.enqueuedTimestamp ? (\n          <TimeElapsed startUnix={step.enqueuedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>{step.priority}</td>\n      <td>\n        <ConcurrencyActionMenu pendingStep={step} onUpdate={onUpdate} />\n      </td>\n    </tr>\n  );\n};\n\nexport const CONCURRENCY_STEP_FRAGMENT = gql`\n  fragment ConcurrencyStepFragment on PendingConcurrencyStep {\n    runId\n    stepKey\n    enqueuedTimestamp\n    assignedTimestamp\n    priority\n  }\n`;\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    claimedSlots {\n      runId\n      stepKey\n    }\n    pendingSteps {\n      ...ConcurrencyStepFragment\n    }\n  }\n  ${CONCURRENCY_STEP_FRAGMENT}\n`;\nexport const RUN_QUEUE_CONFIG_FRAGMENT = gql`\n  fragment RunQueueConfigFragment on RunQueueConfig {\n    maxConcurrentRuns\n    tagConcurrencyLimitsYaml\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      runQueuingSupported\n      runQueueConfig {\n        ...RunQueueConfigFragment\n      }\n      minConcurrencyLimitValue\n      maxConcurrencyLimitValue\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n  ${RUN_QUEUE_CONFIG_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nconst DELETE_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation DeleteConcurrencyLimit($concurrencyKey: String!) {\n    deleteConcurrencyLimit(concurrencyKey: $concurrencyKey)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_MUTATION = gql`\n  mutation FreeConcurrencySlots($runId: String!, $stepKey: String) {\n    freeConcurrencySlots(runId: $runId, stepKey: $stepKey)\n  }\n`;\n\nconst CONCURRENCY_KEY_DETAILS_QUERY = gql`\n  query ConcurrencyKeyDetailsQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n"],"names":["InstanceConcurrencyPageContent","React","useTrackPageView","useDocumentTitle","useQueryPersistedState","queryKey","selectedKey","setSelectedKey","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","div","style","overflowY","jsxs","Fragment","Box","margin","bottom","RunConcurrencyContent","hasRunQueue","instance","runQueuingSupported","runQueueConfig","ConcurrencyLimits","instanceConfig","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","minValue","minConcurrencyLimitValue","maxValue","maxConcurrencyLimitValue","onSelectKey","padding","vertical","Spinner","purpose","InstanceConcurrencyPage","pageTitle","InstancePageContext","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","__webpack_exports__","param","onEdit","horizontal","border","flex","direction","alignItems","justifyContent","Subheading","QueryRefreshCountdown","Mono","a","target","rel","href","infoContent","settings_content","MetadataTableWIP","tbody","tr","td","maxConcurrentRuns","tagConcurrencyLimitsYaml","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","RunConcurrencyLimitHeader","gap","Button","icon","Icon","name","onClick","action","setAction","onConcurrencyStepsDialogClose","undefined","limitsByKey","Object","fromEntries","map","concurrencyKey","slotCount","sortedLimits","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_26__","_","sort","b","COMMON_COLLATOR","compare","onAdd","actionType","concurrencyLimit","onDelete","includes","ConcurrencyLimitHeader","NonIdealState","description","length","ButtonLink","Table","thead","th","width","limit","pendingSteps","filter","x","assignedTimestamp","span","marginRight","Tag","intent","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyStepsDialog","strong","onUpdate","Popover","content","Menu","MenuItem","text","position","isValidLimit","minLimitValue","maxLimitValue","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_34__","variables","_state","sent","Dialog","isOpen","DialogBody","TextInput","onChange","e","placeholder","concat","DialogFooter","disabled","deleteConcurrencyLimit","DELETE_CONCURRENCY_LIMIT_MUTATION","ConcurrencyActionMenu","pendingStep","freeSlots","FREE_CONCURRENCY_SLOTS_MUTATION","resp","runId","stepKey","freeConcurrencySlots","showSharedToaster","message","rightIcon","CONCURRENCY_KEY_DETAILS_QUERY","skip","minWidth","maxWidth","maxHeight","grow","PendingStepsTable","keyInfo","refresh","runIds","Set","step","RUNS_FOR_CONCURRENCY_KEY_QUERY","statusByRunId","runs","pipelineRunsOrError","__typename","results","forEach","run","id","status","steps","priority","enqueuedTimestamp","assignedSteps","tableHeader","Tooltip","placement","color","Colors","backgroundColor","PendingStepRow","colSpan","runStatus","Link","to","RunStatusDot","size","titleForRun","failedStatuses","has","TimeElapsed","startUnix","endUnix","CONCURRENCY_STEP_FRAGMENT","gql","CONCURRENCY_LIMIT_FRAGMENT","RUN_QUEUE_CONFIG_FRAGMENT","InstanceWarningIcon","memo","daemons","useContext","DeploymentStatusContext","jsx_runtime","WarningTooltip","modifiers","offset","enabled","WorkspaceStatus","codeLocations","type","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink"],"sourceRoot":""}