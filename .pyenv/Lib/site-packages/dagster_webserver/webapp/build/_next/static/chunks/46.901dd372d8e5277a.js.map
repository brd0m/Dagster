{"version":3,"file":"static/chunks/46.901dd372d8e5277a.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewExpansionKey.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/runs/RepoSectionHeader.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/ui/findDuplicateRepoNames.tsx","webpack://_N_E/../ui-core/src/ui/useRepoExpansionState.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedWorkspaceTable.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Box, Button, Dialog, DialogFooter, DialogHeader, Icon} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = useContext(WorkspaceContext);\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        outlined\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const JobsPageContent = () => {\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Jobs</Heading>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {Box, Colors, Icon, IconWrapper} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={Colors.accentGray()} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${Colors.backgroundLight()};\n  border: 0;\n  box-shadow:\n    inset 0px -1px 0 ${Colors.keylineDefault()},\n    inset 0px 1px 0 ${Colors.keylineDefault()};\n  color: ${Colors.textLight()};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${Colors.backgroundLightHover()};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${Colors.textLighter()};\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagster.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = useCallback(\n    (repoAddress: RepoAddress) => {\n      const key = repoAddressAsHumanString(repoAddress);\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, MiddleTruncate} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.textLight(),\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {QueryResult} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {RepoAddress} from './types';\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nexport const RepoRow = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}: {\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone = ({\n  queryResult,\n  noneString = 'None',\n}: {\n  queryResult: QueryResult<any, any>;\n  noneString?: React.ReactNode;\n}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.textLight()}}>\n      {!called || (loading && !data) ? 'Loading' : noneString}\n    </div>\n  );\n};\n\nexport const CaptionText = ({children}: {children: React.ReactNode}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${Colors.textLight()};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = (lazyQueryFn: () => void) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [lazyQueryFn]);\n};\n"],"names":["LastRunSummary","memo","param","tagElement","name","run","showHover","_param_showButton","showButton","_param_showSummary","showSummary","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","jsx","Tag","RunStatusIndicator","size","RunTime","_param_showHover","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","concat","RepoFilterButton","useContext","WorkspaceContext","allRepos","visibleRepos","toggleVisible","useState","open","setOpen","Fragment","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","DialogHeader","icon","label","RepoSelector","options","onBrowse","onToggle","selected","DialogFooter","padding","top","Button","onClick","outlined","Icon","rightIcon","length","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Caption","color","Colors","Link","stepKey","gql","OverviewJobsTable","repos","parentRef","useRef","allKeys","map","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","flat","forEach","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","VirtualizedJobHeader","overflow","Container","ref","Inner","$totalHeight","index","key","start","RepoRow","height","expanded","showLocation","rightElement","Tooltip","placement","VirtualizedJobRow","JobsPageContent","loading","useQueryPersistedState","queryKey","defaults","search","searchValue","setSearchValue","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","visibleKeys","visibleRepoKeys","buildBuckets","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","horizontal","vertical","grow","TextInput","value","SearchInputSpinner","tooltipContent","onChange","e","target","placeholder","QueryRefreshCountdown","SpinnerWithText","paddingTop","Spinner","purpose","anyReposHidden","NonIdealState","title","description","strong","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","buckets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","repositories","Symbol","iterator","repo","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","err","return","sortRepoBuckets","PYTHON_ERROR_FRAGMENT","JobsRoot","useTrackPageView","useDocumentTitle","PageHeader","Heading","__webpack_exports__","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_1__","_","sort","a","b","aString","bString","localeCompare","Set","option","repository","repositoryLocation","SECTION_HEADER_HEIGHT","RepoSectionHeader","repoName","repoLocation","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","$open","RepoName","RepoLocation","margin","styled","button","withConfig","IconWrapper","span","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","MAX_OPACITY","RunStatusPezList","fade","jobName","runs","max","OverlayContainer","OverlayTitle","RunRow","Mono","fontSize","titleForRun","SummaryContainer","FontFamily","default","useDelayedState","delayMsec","ready","setReady","useEffect","timer","setTimeout","clearTimeout","canShow","repoNames","uniques","duplicates","add","validateExpandedKeys","parsed","Array","isArray","collapsedKey","basePath","collapsedStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","useCallback","nextCollapsedKeys","delete","from","expand","collapsedSet","JobMenu","job","isAssetJob","lastRun","pipelineSelector","pipelineName","repositoryName","repositoryLocationName","location","materialize","useMaterializationAction","onReexecute","useJobReexecution","usePermissionsForLocation","_usePermissionsForLocation_permissions","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchHasExecutionPlan","fetchIfPossible","executeItem","MenuItem","text","disabled","MenuLink","workspacePipelinePath","path","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","onOpened","Menu","display","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","SINGLE_JOB_QUERY","selector","buildPipelineSelector","queryJob","queryResult","useDelayedRowQuery","pipelineOrError","schedules","sensors","latestRuns","_to_consumable_array","Row","$height","$start","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","workspacePathFromAddress","MiddleTruncate","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","reverse","marginTop","gridTemplateColumns","HeaderCell","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","getModifierState","noneString","called","_param_noneString","children","CaptionTextContainer","lazyQueryFn","React"],"sourceRoot":""}